@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

@{
    var apiUrl = Configuration["ApiUrl"];  // Fetch from appsettings.Development.json or appsettings.Production.json
    var environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List</title>
    <style>
        /* Styling for the page */
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f4f4f4;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }

        h1 {
            color: #4CAF50;
        }

        input[type="text"] {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            font-size: 16px;
        }

        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-right: 10px;
        }

        button:hover {
            background-color: #45a049;
        }

        .task-list {
            list-style: none;
            padding: 0;
        }

        .task-list li {
            background-color: #fff;
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .task-list li.completed span {
            text-decoration: line-through;
            color: #888;
        }

        .environment-display {
            margin-top: 20px;
            font-size: 14px;
            color: #888;
        }
    </style>
</head>
<body>
    <h1>To-Do List</h1>

    <input type="text" id="taskInput" placeholder="Enter a new task">
    <button onclick="addTask()">Add Task</button>

    <h2>Not Completed Tasks</h2>
    <ul id="notCompletedTasks" class="task-list"></ul>

    <h2>Completed Tasks</h2>
    <ul id="completedTasks" class="task-list"></ul>

    <!-- Hidden input to edit a task -->
    <div id="editSection" style="display:none;">
        <h2>Edit Task</h2>
        <input type="text" id="editTaskInput">
        <button onclick="updateTask()">Update Task</button>
    </div>

    <script>
        let editTaskId = null;
        const apiUrl = '@apiUrl';
        
        // Fetch all tasks from the API
        async function fetchTasks() {
            const response = await fetch(`${apiUrl}/api/todo`);
            const tasks = await response.json();

            const notCompletedTasks = document.getElementById('notCompletedTasks');
            const completedTasks = document.getElementById('completedTasks');

            // Clear both task lists
            notCompletedTasks.innerHTML = '';
            completedTasks.innerHTML = '';

            tasks.forEach(task => {
                const taskItem = document.createElement('li');
                taskItem.className = 'task';
                if (task.isComplete) {
                    taskItem.classList.add('completed');
                }
                taskItem.innerHTML = `<span>${task.name}</span>
                    <button onclick="toggleCompletion(${task.id}, ${task.isComplete})">${task.isComplete ? 'Mark as Not Complete' : 'Mark as Complete'}</button>
                    <button onclick="editTask(${task.id}, '${task.name}')">Edit</button>
                    <button onclick="deleteTask(${task.id})">Delete</button>`;

                if (task.isComplete) {
                    completedTasks.appendChild(taskItem);
                } else {
                    notCompletedTasks.appendChild(taskItem);
                }
            });
        }

        // Add a new task
        async function addTask() {
            const taskInput = document.getElementById('taskInput').value;
            if (taskInput.trim() === '') {
                alert('Task cannot be empty');
                return;
            }

            await fetch(`${apiUrl}/api/todo`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name: taskInput, isComplete: false })
            });
            document.getElementById('taskInput').value = '';
            fetchTasks();
        }

        // Delete a task
        async function deleteTask(id) {
            await fetch(`${apiUrl}/api/todo/${id}`, { method: 'DELETE' });
            fetchTasks();
        }

        // Edit a task
        function editTask(id, taskName) {
            editTaskId = id;
            document.getElementById('editTaskInput').value = taskName;
            document.getElementById('editSection').style.display = 'block';
        }

        // Update a task
        async function updateTask() {
            const updatedTaskName = document.getElementById('editTaskInput').value;

            if (updatedTaskName.trim() === '') {
                alert('Task cannot be empty');
                return;
            }

            await fetch(`${apiUrl}/api/todo/${editTaskId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name: updatedTaskName, isComplete: false })
            });

            document.getElementById('editSection').style.display = 'none';
            editTaskId = null;
            fetchTasks();
        }

        // Toggle completion status of a task
        async function toggleCompletion(id, currentStatus) {
            const response = await fetch(`${apiUrl}/api/todo/${id}`);
            const task = await response.json();
            task.isComplete = !currentStatus;

            await fetch(`${apiUrl}/api/todo/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(task)
            });

            fetchTasks();
        }
    </script>
</body>
</html>
